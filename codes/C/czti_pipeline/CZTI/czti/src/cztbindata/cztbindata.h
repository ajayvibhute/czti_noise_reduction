/* 
 * File:   cztbindata.h
 * Author: Tanul Gupta
 * Created on September 7, 2015, 4:11 PM
 *
 * Edited for updated version of bindata
 * 
 * Mithun N P S (01/07/2016)
 */

#ifndef CZTBINDATA_H
#define	CZTBINDATA_H

#include<pil.h>
#include<pthread.h>
#include<iomanip>
#include <string>
#include"utils.h"
#include "glog/logging.h"
#include "badpixCALDB.h"
#include "cztstring.h"
#include "validations.h"
//#include "coordinateTransformation.h"
//#include "maskGeometry.h"
//#include "detectorGeometry.h"
#include "caldbHandler.h"
//#include "level2validation.h"
//#include "level1handler.h"
//#include "errorHandler.h"
//#include "validations.h"

#define SPEC_EXTNAME "SPECTRUM"
#define LC_EXTNAME "LIGHTCURVE"

//Output type
#define SPEC 0
#define LC 1
#define SPECLC 2
//Coordinate type
#define CAMERA 0
#define CELESTIAL 1

#define COMP_COLS 327
#define TOTALROWS 8175
#define DET_NUMPIXELS 64
#define COLS 1950
#define ROWS 1950
#define MATHPI 3.14159265

int checkbit(int *,int ,int);
void calculateTrans(float,float ,float ,int *,float *);
void getModule(int ,int *);
void printerror( int status);
void getMaskPattern(char*,int *,int);
int getShadow(float tx,float ty,int qid,float *shadow_pixels,int *maskElements, ExposureTable &exptable);

extern"C" {
    void fcompute_tx_ty_(double *RAroll,double *Decroll,double *roll_rot,double *RAsrc,double *Decsrc,double *thetax,double *thetay);
}

int calculate_renormalized_weights(ExposureTable &expTable,Badpix &badpix,int badpixThreshold,int quadID,string effareaFilename,string evtfilename);

using namespace std;


class cztbindata{
private:
    char modulename[NAMESIZE];
    char infile[PIL_LINESIZE];   //input event file
    char mkffile[PIL_LINESIZE];
    char pixelqualityfile[PIL_LINESIZE]; //badpix file generated by cztflagbadpix
    char livetimefile[PIL_LINESIZE];
    char outfile[PIL_LINESIZE];
	char outevtfile[PIL_LINESIZE];

	char compmaskfile[PIL_LINESIZE];
    char cameraGeomFile[PIL_LINESIZE];
	char effectiveAreafile[PIL_LINESIZE]; 
    char eboundsfile[PIL_LINESIZE];
	char LLDfile[PIL_LINESIZE];

    char energyrange[PIL_LINESIZE];

	
	char coordtype[PIL_LINESIZE];
    char aspectfileQ0[PIL_LINESIZE];
    char aspectfileQ1[PIL_LINESIZE];
    char aspectfileQ2[PIL_LINESIZE];
    char aspectfileQ3[PIL_LINESIZE];
    
	char outexparrayfile[PIL_LINESIZE];
    
	
	float binsize;                 //required for uniform binning 
    char outputtype[25];          //lc/spec/both
    float theta1;
    float theta2;       
    char quadsToProcess[25];
    int nbins;                //will hold number of bins
    int badpixThreshold;      //badpix Threshold
    int outtypeflag;          //0:Spectrum 1:Light Curve 2:Both
    int coordflag;            //coordinate flag type
    float ra,dec;
	float RAsrc,DECsrc;
	int applyLLD;
	int generate_eventfile;
    int clobber;
    int history;
    int debug;
	int maskWeight;
    
public:
    cztbindata();
    ~cztbindata();
    int read(int argc,char **argv);
    
	int read(char *infile, char* attitudefile,char *pixelqualityfile, char *livetimefile, char * outfile,
        char *outevtfile,int maskWeight,float RAsrc,float DECsrc,int badpixThreshold,char *outputtype,float binsize,
        char *energyrange,char *quadsToProcess,char *compmaskfile,char *eboundsfile, char *cameraGeomFile,
        char *effectiveAreafile,char *LLDfile,int applyLLD,int generate_eventfile, int clobber, int history, int debug);

	
	void display();
    void clear();

	int write_weight_evtfile(char *outevtfile,int qid,float *evtfrac, float *evtweight,long nevt);

	int read_lldfile(string caldb_lld,int qid,int *lld);


	/**
    * Function to produce light curve or spectrum
    * @param par
    * @return 
    */
    int cztbindataProcess();

    /**
    * Function to generate history for the module, to be written to the output file
    * @param vhistory
    * @return 
    */
    int getHistory(vector<string> &vhistory);
    
};



#endif /*TESTCZTBINDATA_H*/

